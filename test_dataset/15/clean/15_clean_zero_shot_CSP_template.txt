The following is six categories of code smells in Ansible script. You can safely assume that the script is defective if it contains a code smell.
1. UR1: Due to an impure initialiser, the variable value may have changed.
2. UR2: The upstream variable has been redefined, so the variable value may have changed.
3. UO1: A new definition overrides a previous definition at a higher precedence without taking the previous definition into account.
4. UO2: A variable definition is manifested while a previous definition already exists, so the definition is unused.
5. HP1: "set_fact" is unnecessarily used when both the expression and all task conditions already took higher precedence.
6. HP2: "include_vars" is unnecessarily used when it will be executed unconditionally.

Refering above Ansible code smell theory, review the provided Ansible code for potential software defect(s).
After your review, assign the code a label from [Defective, None-defective].
‘Defective’ implies that there is at least one software defect. ‘None-defective’ implies that there is no software defect.
Return only the label.
Code: 
---

- set_fact: es_script_dir={{ es_conf_dir }}/{{es_instance_name}}
  tags:
      - always

- set_fact: es_script_dir={{es_config['path.scripts']}}
  when: es_config['path.scripts'] is defined
  tags:
      - always

- name: Create script dir
  file: state=directory path={{ es_script_dir }} owner={{ es_user }} group={{ es_group }}

- name: Copy default scripts to elasticsearch
  copy: src=scripts dest={{ es_script_dir }} owner={{ es_user }} group={{ es_group }}
  when: es_scripts_fileglob is not defined

- name: Copy scripts to elasticsearch
  copy: src={{ item }} dest={{ es_script_dir }} owner={{ es_user }} group={{ es_group }}
  with_fileglob: "{{ es_scripts_fileglob }}"

Label: