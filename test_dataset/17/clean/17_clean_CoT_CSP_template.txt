The following is six categories of code smells in Ansible script. You can safely assume that the script is defective if it contains a code smell.
1. UR1: Due to an impure initialiser, the variable value may have changed.
2. UR2: The upstream variable has been redefined, so the variable value may have changed.
3. UO1: A new definition overrides a previous definition at a higher precedence without taking the previous definition into account.
4. UO2: A variable definition is manifested while a previous definition already exists, so the definition is unused.
5. HP1: "set_fact" is unnecessarily used when both the expression and all task conditions already took higher precedence.
6. HP2: "include_vars" is unnecessarily used when it will be executed unconditionally.

The followings are example of Ansible scripts.
Q1: 
---

- name: "path: '{{ freckle_path }}'"
  debug:
      msg: "Path to process: '{{ freckle_path }}'"

- name: "[base vars]"
  debug: var=freckle_base_vars

- name: "[freckle vars]"
  debug: var=freckle_vars

# setting permissions
- name: "creating group '{{ freckle_base_vars.group }}' (for folder '{{ freckle_path }}')"
  group:
    name: "{{ freckle_base_vars.group }}"
    state: present
    gid: "{{ freckle_base_vars.gid | default(omit) }}"
  when: "'group' in freckle_base_vars.keys()"
  become: yes

# TODO: should we do this group assignment?
- name: "creating user '{{ freckle_base_vars.owner }} (for folder '{{ freckle_path }}')"
  user:
    name: "{{ freckle_base_vars['owner'] }}"
    state: present
    group: "{{ freckle_base_vars.group | default(omit) }}"
    uid: "{{ freckle_base_vars.uid | default(omit) }}"
  when: "'owner' in freckle_base_vars.keys()"
  become: yes

- name: "setting owner/group permissions for: {{ freckle_path }}"
  file:
    path: "{{ freckle_path }}"
    owner: "{{ freckle_base_vars.owner | default(omit) }}"
    group: "{{ freckle_base_vars.group | default(omit) }}"
    recurse: True
  when: freckle_base_vars.get('owner', False) or freckle_base_vars.get('group', False)
  become: yes

- name: "[get freckle folder owner/group]"
  stat:
      path: "{{ freckle_path }}"
  register: freckle_path_info

- name: "[easier access to info var]"
  set_fact:
      freckle_path_info: "{{ freckle_path_info.stat }}"

- name: "[setting freckle_owner, freckle_uid, freckle_group, freckle_gid]"
  set_fact:
      freckle_owner: "{{ freckle_path_info.pw_name }}"
      freckle_uid: "{{ freckle_path_info.uid }}"
      freckle_group: "{{ freckle_path_info.gr_name }}"
      freckle_gid: "{{ freckle_path_info.gid }}"

# setting freckle vars
# TODO: maybe save old vars and re-apply after execution?
- name: "[setting variables]"
  set_fact:
      "{{ var_item.key }}": "{{ var_item.value }}"
  with_dict: "{{ freckle_vars }}"
  loop_control:
      loop_var: var_item

- name: "[executing task lists for freckle folder]"
  include_tasks: "{{ playbook_dir }}/../task_lists/{{ task_item_name['target'] }}"
  vars:
    freckle_folder_name: "{{ freckle_folder_metadata['folder_name'] }}"
    freckle_owner: "{{ freckle_base_vars.get('owner', None) }}"
  with_items:
    - "{{ adapters_files_map.get(freckelize_profile_name, {}).get('freckle', []) }}"
  loop_control:
    loop_var: task_item_name

- name: "[unsetting variables]"
  set_fact:
      "{{ var_item.key }}": null
  with_dict: "{{ freckle_vars }}"
  loop_control:
      loop_var: var_item

- name: "[unsetting freckle_owner, freckle_uid, freckle_group, freckle_gid]"
  set_fact:
      freckle_owner: null
      freckle_uid: null
      freckle_group: null
      freckle_gid: null
A1: This code contains a code smell of type HP1, because Unnecessary use of set_fact for variable "freckle_uid@0". Therefore, the code is defective.
Q2: 
---

- name: "path: '{{ freckle_path }}'"
  debug:
      msg: "Path to process: '{{ freckle_path }}'"

- name: "[base vars]"
  debug: var=freckle_base_vars

- name: "[freckle vars]"
  debug: var=freckle_vars

# setting permissions
- name: "creating group '{{ freckle_base_vars.group }}' (for folder '{{ freckle_path }}')"
  group:
    name: "{{ freckle_base_vars.group }}"
    state: present
    gid: "{{ freckle_base_vars.gid | default(omit) }}"
  when: "'group' in freckle_base_vars.keys()"
  become: yes

# TODO: should we do this group assignment?
- name: "creating user '{{ freckle_base_vars.owner }} (for folder '{{ freckle_path }}')"
  user:
    name: "{{ freckle_base_vars['owner'] }}"
    state: present
    group: "{{ freckle_base_vars.group | default(omit) }}"
    uid: "{{ freckle_base_vars.uid | default(omit) }}"
  when: "'owner' in freckle_base_vars.keys()"
  become: yes

- name: "setting owner/group permissions for: {{ freckle_path }}"
  file:
    path: "{{ freckle_path }}"
    owner: "{{ freckle_base_vars.owner | default(omit) }}"
    group: "{{ freckle_base_vars.group | default(omit) }}"
    recurse: True
  when: freckle_base_vars.get('owner', False) or freckle_base_vars.get('group', False)
  become: yes

- name: "[get freckle folder owner/group]"
  stat:
      path: "{{ freckle_path }}"
  register: freckle_path_info

- name: "[easier access to info var]"
  set_fact:
      freckle_path_info: "{{ freckle_path_info.stat }}"

- name: "[setting freckle_owner, freckle_uid, freckle_group, freckle_gid]"
  set_fact:
      freckle_owner: "{{ freckle_path_info.pw_name }}"
      freckle_uid: "{{ freckle_path_info.uid }}"
      freckle_group: "{{ freckle_path_info.gr_name }}"
      freckle_gid: "{{ freckle_path_info.gid }}"

# setting freckle vars
# TODO: maybe save old vars and re-apply after execution?
- name: "[setting variables]"
  set_fact:
      "{{ var_item.key }}": "{{ var_item.value }}"
  with_dict: "{{ freckle_vars }}"
  loop_control:
      loop_var: var_item

- name: "[executing task lists for freckle folder]"
  include_tasks: "{{ playbook_dir }}/../task_lists/task_list_{{ freckelize_profile_name }}.yml"
  vars:
    freckle_folder_name: "{{ freckle_folder_metadata['folder_name'] }}"
    freckle_owner: "{{ freckle_base_vars.get('owner', None) }}"
  # with_items:
  #   - "{{ adapters_files_map.get(freckelize_profile_name, {}).get('freckle', []) }}"
  # loop_control:
  #   loop_var: task_item_name

- name: "[unsetting variables]"
  set_fact:
      "{{ var_item.key }}": null
  with_dict: "{{ freckle_vars }}"
  loop_control:
      loop_var: var_item

- name: "[unsetting freckle_owner, freckle_uid, freckle_group, freckle_gid]"
  set_fact:
      freckle_owner: null
      freckle_uid: null
      freckle_group: null
      freckle_gid: null
A2: This code does not contain a code smell, because it is a fixed version of the above example. Therefore, the code is not defective.

Q: 
---
- name: Initialize Kubernetes master with kubeadm init.
  command: >
    kubeadm init
    --pod-network-cidr={{ kubernetes_pod_network.cidr }}
    --apiserver-advertise-address={{ kubernetes_apiserver_advertise_address | default(ansible_default_ipv4.address, true) }}
    --kubernetes-version {{ kubernetes_version_kubeadm }}
    --ignore-preflight-errors={{ kubernetes_ignore_preflight_errors }}
    {{ kubernetes_kubeadm_init_extra_opts }}
  register: kubeadmin_init
  when: not kubernetes_init_stat.stat.exists

- name: Print the init output to screen.
  debug:
    var: kubeadmin_init.stdout
    verbosity: 2
  when: not kubernetes_init_stat.stat.exists

- name: Ensure .kube directory exists.
  file:
    path: ~/.kube
    state: directory
    mode: 0755

- name: Symlink the kubectl admin.conf to ~/.kube/conf.
  file:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/config
    state: link
    mode: 0644

- name: Configure Flannel rbac.
  command: "{{ item }}"
  with_items:
    - kubectl apply -f {{ kubernetes_flannel_manifest_file_rbac }}
  register: flannel_result
  changed_when: "'created' in flannel_result.stdout"
  when: kubernetes_pod_network.cni == 'flannel'

- name: Configure Flannel networking.
  shell:
    warn: false
    cmd: curl {{ kubernetes_flannel_manifest_file }} | sed "s;10.244.0.0/16;{{ kubernetes_pod_network.cidr }};g" | kubectl apply -f -
  register: flannel_result
  changed_when: "'created' in flannel_result.stdout"
  when: kubernetes_pod_network.cni == 'flannel'

- name: Configure Calico networking.
  shell:
    warn: false
    cmd: curl {{ kubernetes_calico_manifest_file }} | sed "s;192.168.0.0/16;{{ kubernetes_pod_network.cidr }};g" | kubectl apply -f -
  register: calico_result
  changed_when: "'created' in calico_result.stdout"
  when: kubernetes_pod_network.cni == 'calico'

- name: Get Kubernetes version for Weave installation.
  shell: kubectl version | base64 | tr -d '\n'
  changed_when: false
  register: kubectl_version
  when: kubernetes_pod_network.cni == 'weave'

- name: Configure Weave networking.
  command: "{{ item }}"
  with_items:
    - "kubectl apply -f
        https://cloud.weave.works/k8s/net?k8s-version={{ kubectl_version.stdout_lines[0] }}&env.IPALLOC_RANGE={{ kubernetes_pod_network.cidr }}"
  register: weave_result
  changed_when: "'created' in weave_result.stdout"
  when: kubernetes_pod_network.cni == 'weave'

# TODO: Check if taint exists with something like `kubectl describe nodes`
# instead of using kubernetes_init_stat.stat.exists check.
- name: Allow pods on master node (if configured).
  command: "kubectl taint nodes --all node-role.kubernetes.io/master-"
  when:
    - kubernetes_allow_pods_on_master | bool
    - not kubernetes_init_stat.stat.exists

- name: Check if Kubernetes Dashboard UI service already exists.
  shell: kubectl get services --namespace kube-system | grep -q kubernetes-dashboard
  changed_when: false
  failed_when: false
  register: kubernetes_dashboard_service
  when: kubernetes_enable_web_ui | bool

- name: Enable the Kubernetes Web Dashboard UI (if configured).
  command: "kubectl create -f {{ kubernetes_web_ui_manifest_file }}"
  when:
    - kubernetes_enable_web_ui | bool
    - kubernetes_dashboard_service.rc != 0

A: