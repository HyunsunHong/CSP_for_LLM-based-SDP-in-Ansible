The following is six categories of code smells in Ansible script. You can safely assume that the script is defective if it contains a code smell.
1. UR1: Due to an impure initialiser, the variable value may have changed.
2. UR2: The upstream variable has been redefined, so the variable value may have changed.
3. UO1: A new definition overrides a previous definition at a higher precedence without taking the previous definition into account.
4. UO2: A variable definition is manifested while a previous definition already exists, so the definition is unused.
5. HP1: "set_fact" is unnecessarily used when both the expression and all task conditions already took higher precedence.
6. HP2: "include_vars" is unnecessarily used when it will be executed unconditionally.

Refering above Ansible code smell theory, review the provided Ansible code for potential software defect(s).
After your review, assign the code a label from [Defective, None-defective].
‘Defective’ implies that there is at least one software defect. ‘None-defective’ implies that there is no software defect.
Return only the label.
Code: 
---

- name: set fact es_same_keystore
  set_fact: es_same_keystore=false

- name: set fact es_same_keystore if stores match
  set_fact: es_same_keystore=true
  when: es_ssl_keystore == es_ssl_truststore

- name: ensure certificate directory exists
  file:
    dest: "{{ es_ssl_certificate_path }}"
    state: directory
    owner: root
    group: "{{ es_group }}"
    mode: "750"

- name: Upload SSL/TLS keystore
  copy:
    src: "{{ es_ssl_keystore }}"
    dest: "{{ es_ssl_certificate_path }}/{{ es_ssl_keystore | basename }}"
    owner: "{{ es_user }}"
    group: "{{ es_group }}"
    mode: "640"
  when: es_ssl_keystore and es_ssl_truststore
  notify: restart elasticsearch
  register: copy_keystore

- name: Upload SSL/TLS truststore
  copy:
    src: "{{ es_ssl_truststore }}"
    dest: "{{ es_ssl_certificate_path }}/{{ es_ssl_truststore | basename }}"
    owner: "{{ es_user }}"
    group: "{{ es_group }}"
    mode: "640"
  when: es_ssl_keystore and es_ssl_truststore
  notify: restart elasticsearch
  register: copy_truststore

- name: Upload SSL/TLS key and certificate
  copy:
    src: "{{ item }}"
    dest: "{{ es_ssl_certificate_path }}/{{ item | basename }}"
    owner: "{{ es_user }}"
    group: "{{ es_group }}"
    mode: "640"
  with_items:
    - "{{ es_ssl_key }}"
    - "{{ es_ssl_certificate }}"
  when: es_ssl_key and es_ssl_certificate
  #Restart if these change
  notify: restart elasticsearch
  register: copy_certificates

- name: Upload SSL Certificate Authority
  copy:
    src: "{{ es_ssl_certificate_authority }}"
    dest: "{{ es_ssl_certificate_path }}/{{ es_ssl_certificate_authority | basename }}"
    owner: "{{ es_user }}"
    group: "{{ es_group }}"
    mode: "640"
  #Restart if this changes
  notify: restart elasticsearch
  when: (es_ssl_certificate_authority is defined) and (es_ssl_certificate_authority|length > 0)

- name: Set keystore password
  shell: echo "{{ es_ssl_keystore_password }}" | {{ es_home }}/bin/elasticsearch-keystore add -x -f 'xpack.security.{{ item }}.ssl.keystore.secure_password'
  no_log: True
  when: es_ssl_keystore_password and (copy_keystore.changed or (es_same_keystore and copy_truststore.changed))
  with_items:
    - http
    - transport

- name: Set truststore password
  shell: echo "{{ es_ssl_truststore_password }}" | {{ es_home }}/bin/elasticsearch-keystore add -x -f 'xpack.security.{{ item }}.ssl.truststore.secure_password'
  no_log: True
  when: es_ssl_truststore_password and (copy_truststore.changed or (es_same_keystore and copy_keystore.changed))
  with_items:
    - http
    - transport

- name: Remove keystore password
  shell: "{{ es_home }}/bin/elasticsearch-keystore remove 'xpack.security.{{ item }}.ssl.keystore.secure_password'"
  when: es_ssl_keystore_password == "" and (copy_keystore.changed or (es_same_keystore and copy_truststore.changed))
  ignore_errors: yes
  with_items:
    - http
    - transport

- name: Remove truststore password
  shell: "{{ es_home }}/bin/elasticsearch-keystore remove 'xpack.security.{{ item }}.ssl.truststore.secure_password'"
  when: es_ssl_truststore_password == "" and (copy_truststore.changed or (es_same_keystore and copy_keystore.changed))
  ignore_errors: yes
  with_items:
    - http
    - transport

- name: Set key password
  shell: echo "{{ es_ssl_key_password }}" | {{ es_home }}/bin/elasticsearch-keystore add -x -f 'xpack.security.{{ item }}.ssl.secure_key_passphrase'
  no_log: True
  when: es_ssl_key_password and copy_certificates.changed
  with_items:
    - http
    - transport

- name: Remove key password
  shell: "{{ es_home }}/bin/elasticsearch-keystore remove 'xpack.security.{{ item }}.ssl.secure_key_passphrase'"
  when: es_ssl_key_password == "" and copy_certificates.changed
  ignore_errors: yes
  with_items:
    - http
    - transport

Label: