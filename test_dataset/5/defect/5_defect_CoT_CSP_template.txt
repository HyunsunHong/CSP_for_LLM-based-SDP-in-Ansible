The following is six categories of code smells in Ansible script. You can safely assume that the script is defective if it contains a code smell.
1. UR1: Due to an impure initialiser, the variable value may have changed.
2. UR2: The upstream variable has been redefined, so the variable value may have changed.
3. UO1: A new definition overrides a previous definition at a higher precedence without taking the previous definition into account.
4. UO2: A variable definition is manifested while a previous definition already exists, so the definition is unused.
5. HP1: "set_fact" is unnecessarily used when both the expression and all task conditions already took higher precedence.
6. HP2: "include_vars" is unnecessarily used when it will be executed unconditionally.

The followings are example of Ansible scripts.
Q1: 
---
- set_fact:
    apt_packages: "{{ __apt_packages|list }}"
  when: apt_packages|default(None) == None

- set_fact:
    distcc_start: "{{ __distcc_start|list }}"
  when: distcc_start|default(None) == None

- set_fact:
    distcc_allowed_nets: "{{ __distcc_allowed_nets|list }}"
  when: distcc_allowed_nets|default(None) == None

- set_fact:
    distcc_listener: "{{ __distcc_listener|list }}"
  when: distcc_listener|default(None) == None

- set_fact:
    distcc_nice: "{{ __distcc_nice }}"
  when: distcc_nice|default(None) == None

- set_fact:
    distcc_jobs: "{{ __distcc_jobs }}"
  when: distcc_jobs|default(None) == None

- set_fact:
    distcc_zeroconf: "{{ __distcc_zeroconf }}"
  when: distcc_zeroconf|default(None) == None

- set_fact:
    distcc_hosts: "{{ __distcc_hosts|list }}"
  when: distcc_hosts|default(None) == None

- set_fact:
    ccache_dir: "{{ __ccache_dir }}"
  when: ccache_dir|default(None) == None

- debconf:
    name: distcc
    question: distcc/daemon
    value: "{{ distcc_start }}"
    vtype: boolean

- debconf:
    name: distcc
    question: distcc/daemon-allow
    value: "{{ distcc_allowed_nets|join(' ') }}"
    vtype: string

- debconf:
    name: distcc
    question: distcc/daemon-listen
    value: "{{ distcc_listener|join(' ') }}"
    vtype: string

- debconf:
    name: distcc
    question: distcc/daemon-nice
    value: "{{ distcc_nice }}"
    vtype: string

- debconf:
    name: distcc
    question: distcc/daemon-jobs
    value: "{{ distcc_jobs }}"
    vtype: string

- debconf:
    name: distcc
    question: distcc/daemon-zeroconf
    value: "{{ distcc_zeroconf }}"
    vtype: boolean

- include_role:
    name: jm1.virtual_pkg
  vars:
     package_name: "jm1-distcc"
     package_depends: "{{ apt_packages }}"

- template:
    src: "{{ distribution_codename }}/etc/distcc/hosts.j2"
    dest: /etc/distcc/hosts
  when: distcc_hosts is defined and distcc_hosts

- template:
    src: "{{ distribution_codename }}/etc/default/distcc.j2"
    dest: /etc/default/distcc
  when: ccache_dir is defined and ccache_dir

- set_fact:
    apt_packages: !!null
    distcc_start: !!null
    distcc_allowed_nets: !!null
    distcc_listener: !!null
    distcc_nice: !!null
    distcc_jobs: !!null
    distcc_zeroconf: !!null
    distcc_hosts: !!null
    ccache_dir: !!null
A1: This code contains a code smell of type UO1, because Potential unintended unconditional override of variable "distcc_allowed_nets@2".. Therefore, the code is defective.
Q2: 
---
- debconf:
    name: distcc
    question: distcc/daemon
    value: "{{ distcc_start }}"
    vtype: boolean

- debconf:
    name: distcc
    question: distcc/daemon-allow
    value: "{{ distcc_allowed_nets|join(' ') }}"
    vtype: string

- debconf:
    name: distcc
    question: distcc/daemon-listen
    value: "{{ distcc_listener|join(' ') }}"
    vtype: string

- debconf:
    name: distcc
    question: distcc/daemon-nice
    value: "{{ distcc_nice }}"
    vtype: string

- debconf:
    name: distcc
    question: distcc/daemon-jobs
    value: "{{ distcc_jobs }}"
    vtype: string

- debconf:
    name: distcc
    question: distcc/daemon-zeroconf
    value: "{{ distcc_zeroconf }}"
    vtype: boolean

- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 86400 # 1 day

- jm1.pkg.meta_pkg:
    name: "jm1-distcc"
    version: "1"
    depends:
    - ccache
    - distcc
    - distcc-pump

- template:
    src: "{{ distribution_id|join('-') }}/etc/distcc/hosts.j2"
    dest: /etc/distcc/hosts
  when: distcc_hosts is defined and distcc_hosts

- template:
    src: "{{ distribution_id|join('-') }}/etc/default/distcc.j2"
    dest: /etc/default/distcc
  when: ccache_dir is defined and ccache_dir
A2: This code does not contain a code smell, because it is a fixed version of the above example. Therefore, the code is not defective.

Q: 
---
## Deploy RADOS Gateway
#

- name: Copy RGW bootstrap key
  copy: src=fetch/{{ hostvars[groups['mons'][0]]['ansible_hostname'] }}/etc/ceph/keyring.radosgw.gateway dest=/etc/ceph/keyring.radosgw.gateway owner=root group=root mode=600
  when: cephx

- name: Set RGW bootstrap key permissions
  file: path=/etc/ceph/keyring.radosgw.gateway mode=0600 owner=root group=root
  when: cephx

#- name: Add optimized version of the apache2 package repository
#  apt_repository: repo='deb http://gitbuilder.ceph.com/apache2-deb-{{ ansible_lsb.codename }}-x86_64-basic/ref/master {{ ansible_lsb.codename }} main' state=present
#
#- name: Add optimized version of the fastcgi package repository
#  apt_repository: repo='deb http://gitbuilder.ceph.com/libapache-mod-fastcgi-deb-{{ ansible_lsb.codename }}-x86_64-basic/ref/master {{ ansible_lsb.codename }} main' state=present
#

- name: Add Ceph extra
  apt_repository: repo='deb http://ceph.com/packages/ceph-extras/debian {{ ansible_lsb.codename }} main' state=present

- name: Install Apache, fastcgi and Rados Gateway
  apt: pkg={{ item }} state=present default_release=precise
  with_items:
    - apache2
    - libapache2-mod-fastcgi
    - radosgw

## Prepare Apache
#

- name: Install default httpd.conf
  template: src=httpd.conf dest=/etc/apache2/httpd.conf owner=root group=root

- name: Enable some apache mod rewrite and fastcgi
  command: "{{ item }}"
  with_items:
    - a2enmod rewrite
    - a2enmod fastcgi

- name: Install Rados Gateway vhost
  template: src=rgw.conf dest=/etc/apache2/sites-available/rgw.conf owner=root group=root

## Prepare RGW
#

- name: Create RGW directory
  file: path=/var/lib/ceph/radosgw/{{ ansible_hostname }} state=directory owner=root group=root mode=0644

- name: Enable Rados Gateway vhost and disable default site
  command: "{{ item }}"
  with_items:
    - a2ensite rgw.conf
    - a2dissite default
  notify:
    - restart apache2

- name: Install s3gw.fcgi script
  copy: src=s3gw.fcgi dest=/var/www/s3gw.fcgi mode=0555 owner=root group=root

## If we don't perform this check Ansible will start multiple instance of radosgw
- name: Check if RGW is started
  command: /etc/init.d/radosgw status
  register: rgwstatus
  ignore_errors: True

- name: Start RGW
  command: /etc/init.d/radosgw start
  when: rgwstatus.rc != 0

- name: Create a user in radosgw
  command: radosgw-admin --name client.radosgw.gateway user create --uid=johndoe --display-name="John Doe" --email=john@example.com

- name: Create a swift subuser
  command: radosgw-admin --name client.radosgw.gateway subuser create --uid=johndoe --subuser=johndoe:swift --access=full
  ignore_errors: True

- name: Create a swift subuser key
  command: radosgw-admin --name client.radosgw.gateway key create --subuser=johndoe:swift --key-type=swift
  ignore_errors: True

A: